image: alpine:latest

variables:
  DOCKER_DRIVER: overlay2

stages:
  - build
  - test

build:
  stage: build
  image: docker:stable-git
  services:
  - docker:stable-dind
  script:
    - setup_docker
    - build

eslint:
  stage: test
  image: node:alpine
  script:
    - npm install && npm run lint
  only:
    - branches
  except:
    - master

prettylint:
  stage: test
  image: node:alpine
  script:
    - npm install && npm run prettylint
  only:
    - branches
  except:
    - master

package-audit:
  stage: test
  image: node:alpine
  script:
    - npm audit
  only:
    - branches
  except:
    - master

container_scanning:
  stage: test
  image: docker:stable
  services:
    - docker:stable-dind
  script:
    - setup_docker
    - container_scanning
  only:
    - branches
  except:
    - master

.devops: &devops |
  export CI_APPLICATION_REPOSITORY=$REGISTRY_USER/$DOCKER_IMAGE_NAME
  export CI_APPLICATION_TAG=${CI_COMMIT_SHA:0:6}

  function registry_login() {
    echo $CI_APPLICATION_REPOSITORY
    echo "Logging to Container Registry with CI credentials..."
    docker login -u "$REGISTRY_USER" -p "$REGISTRY_PASSWORD"
    echo ""
  }

  function container_scanning() {
    docker run -d --name db arminc/clair-db:latest
    docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
    apk add -U wget ca-certificates
    docker pull ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}
    wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    mv clair-scanner_linux_amd64 clair-scanner
    chmod +x clair-scanner
    touch clair-whitelist.yml
    retries=0
    echo "Waiting for clair daemon to start"
    while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}
  }

  function setup_docker() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi
  }

  function build() {
    registry_login

    echo "Building Dockerfile-based application..."
    docker build -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .

    echo "Pushing to GitLab Container Registry..."
    docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"

    echo ""
  }

before_script:
  - *devops

